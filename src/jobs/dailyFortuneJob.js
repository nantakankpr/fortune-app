const DailyFortuneModel = require('../models/DailyFortuneModel');
const SubscriptionModel = require('../models/SubscriptionModel');
const { client } = require('../services/lineService');

class DailyFortuneJob {
    /**
     * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° daily fortune ‡πÉ‡∏´‡πâ user ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ subscription active
     */
    static async sendDailyFortuneMessages() {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î subscription ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡πà‡∏≠‡∏ô
            await this.deactivateExpiredSubscriptions();

            // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ user ‡∏ó‡∏µ‡πà‡∏°‡∏µ fortune ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏°‡∏µ subscription active
            const usersWithFortune = await DailyFortuneModel.getUsersWithTodayFortune();

            if (usersWithFortune.length === 0) {
                return { success: true, sent: 0, failed: 0 };
            }

            let sentCount = 0;
            let failedCount = 0;
            const failedUsers = [];

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô
            for (const user of usersWithFortune) {
                try {
                    await this.sendFortuneMessageWithRetry(user);
                    sentCount++;

                    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö random ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ spam LINE API
                    const randomDelay = this.getRandomDelay();
                    await this.delay(randomDelay);
                } catch (error) {
                    failedCount++;
                    failedUsers.push({
                        user_id: user.user_id,
                        line_name: user.line_name,
                        error: error.message
                    });
                    console.error(`‚ùå Failed to send fortune to user: ${user.line_name} (${user.user_id})`, error.message);
                }
            }

            if (failedUsers.length > 0) {
                console.log('üìù Failed users:', failedUsers);
            }

            return {
                success: true,
                sent: sentCount,
                failed: failedCount,
                total: usersWithFortune.length,
                failedUsers
            };

        } catch (error) {
            console.error('‚ùå Daily fortune job failed:', error);
            throw error;
        }
    }

    /**
     * ‡∏õ‡∏¥‡∏î subscription ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
     */
    static async deactivateExpiredSubscriptions() {
        try {
            const result = await SubscriptionModel.deactivateExpiredSubscriptions();
            if (result.affectedRows > 0) {
                console.log(`üîÑ Deactivated ${result.affectedRows} expired subscriptions`);
            }
        } catch (error) {
            console.error('‚ùå Failed to deactivate expired subscriptions:', error);
            // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ job ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
        }
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° fortune ‡πÉ‡∏´‡πâ user ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° retry mechanism
     */
    static async sendFortuneMessageWithRetry(user, maxRetries = 3) {
        let lastError;

        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                await this.sendFortuneMessage(user);
                return; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
            } catch (error) {
                lastError = error;
                console.warn(`‚ö†Ô∏è Attempt ${attempt}/${maxRetries} failed for user ${user.user_id}: ${error.message}`);

                if (attempt < maxRetries) {
                    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô retry ‡πÅ‡∏ö‡∏ö exponential backoff
                    const delayTime = Math.min(1000 * Math.pow(2, attempt - 1), 5000);
                    await this.delay(delayTime);
                }
            }
        }

        throw lastError; // ‡∏ñ‡πâ‡∏≤ retry ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° fortune ‡πÉ‡∏´‡πâ user ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
     */
    static async sendFortuneMessage(user) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
            if (!user.user_id) {
                throw new Error('User ID is required');
            }

            const message = this.createFortuneMessage(user);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (LINE ‡∏°‡∏µ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î)
            if (message.text.length > 2000) {
                console.warn(`‚ö†Ô∏è Message too long for user ${user.user_id}, truncating...`);
                message.text = message.text.substring(0, 1950) + '...';
            }

            await client.pushMessage(user.user_id, message);

        } catch (error) {
            console.error(`Failed to send message to user ${user.user_id}:`, error);
            throw error;
        }
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° fortune
     */
    static createFortuneMessage(user) {
        try {
            const today = new Date().toLocaleDateString('th-TH', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: 'Asia/Bangkok'
            });

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const userName = user.line_name ? user.line_name.trim() : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
            const categoryText = user.category ? `üìÇ ‡∏´‡∏°‡∏ß‡∏î: ${user.category.trim()}\n` : '';
            const zodiacText = user.zodiac ? `‚ôà ‡∏£‡∏≤‡∏®‡∏µ: ${user.zodiac.trim()}\n` : '';
            const content = user.content ? user.content.trim() : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô';

            const messageText = `üåÖ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ ‡∏Ñ‡∏∏‡∏ì${userName}

üìÖ ${today}

üîÆ ‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
${categoryText}${zodiacText}
${content}

‚ú® ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞!

---
Fortune App üí´`;

            return {
                type: 'text',
                text: messageText
            };

        } catch (error) {
            console.error('Error creating fortune message:', error);
            // Return fallback message
            return {
                type: 'text',
                text: `üåÖ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ ‡∏Ñ‡∏∏‡∏ì${user.line_name || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}

üîÆ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏ß‡∏á

‚ú® ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞!

---
Fortune App üí´`
            };
        }
    }

    /**
     * ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (delay)
     */
    static delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á random delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
 */
    static getRandomDelay() {
        const delays = [500, 600, 700, 800, 900, 1000];
        const randomIndex = Math.floor(Math.random() * delays.length);
        return delays[randomIndex];
    }
}

module.exports = DailyFortuneJob;