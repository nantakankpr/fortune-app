const cron = require('node-cron');
const SubscriptionJob = require('./subscriptionJob');

class CronScheduler {
    static jobs = new Map();

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô cron jobs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    static initializeJobs() {
        console.log('üïí Initializing cron jobs...');

        // ‡∏õ‡∏¥‡∏î subscription ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        this.scheduleJob('subscription-cleanup', '0 * * * *', async () => {
            await SubscriptionJob.deactivateExpiredSubscriptions();
        });

        // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î expired cache ‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
        this.scheduleJob('cache-cleanup', '*/30 * * * *', () => {
            SubscriptionJob.cleanExpiredCache();
        });

        console.log(`‚úÖ Initialized ${this.jobs.size} cron jobs`);
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á cron job ‡πÉ‡∏´‡∏°‡πà
     */
    static scheduleJob(name, cronPattern, jobFunction) {
        try {
            const task = cron.schedule(cronPattern, jobFunction, {
                scheduled: true,
                timezone: 'Asia/Bangkok'
            });

            this.jobs.set(name, {
                task: task,
                pattern: cronPattern,
                name: name,
                isRunning: task.running || false
            });

            console.log(`üìÖ Scheduled job '${name}' with pattern: ${cronPattern}`);
            return task;
        } catch (error) {
            console.error(`‚ùå Failed to schedule job '${name}':`, error);
            throw error;
        }
    }

    /**
     * ‡∏´‡∏¢‡∏∏‡∏î cron job
     */
    static stopJob(name) {
        const job = this.jobs.get(name);
        if (job) {
            job.task.stop();
            console.log(`‚èπÔ∏è  Stopped job '${name}'`);
            return true;
        }
        console.warn(`‚ö†Ô∏è  Job '${name}' not found`);
        return false;
    }

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏° cron job ‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏ß‡πâ
     */
    static startJob(name) {
        const job = this.jobs.get(name);
        if (job) {
            job.task.start();
            console.log(`‚ñ∂Ô∏è  Started job '${name}'`);
            return true;
        }
        console.warn(`‚ö†Ô∏è  Job '${name}' not found`);
        return false;
    }

    /**
     * ‡∏£‡∏±‡∏ô job ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (manual trigger)
     */
    static async runJobNow(name) {
        const job = this.jobs.get(name);
        if (job) {
            console.log(`üöÄ Manually triggering job '${name}'`);
            try {
                if (name === 'subscription-cleanup') {
                    await SubscriptionJob.deactivateExpiredSubscriptions();
                } else if (name === 'cache-cleanup') {
                    SubscriptionJob.cleanExpiredCache();
                }
                console.log(`‚úÖ Job '${name}' completed successfully`);
                return true;
            } catch (error) {
                console.error(`‚ùå Job '${name}' failed:`, error);
                throw error;
            }
        }
        console.warn(`‚ö†Ô∏è  Job '${name}' not found`);
        return false;
    }

    /**
     * ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ jobs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    static getJobsStatus() {
        const status = {};
        
        for (const [name, job] of this.jobs.entries()) {
            status[name] = {
                name: job.name,
                pattern: job.pattern,
                isRunning: job.task.running || false
            };
        }

        return status;
    }

    /**
     * ‡∏´‡∏¢‡∏∏‡∏î jobs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    static stopAllJobs() {
        console.log('üõë Stopping all cron jobs...');
        
        for (const [name, job] of this.jobs.entries()) {
            job.task.stop();
        }
        
        console.log(`‚úÖ Stopped ${this.jobs.size} cron jobs`);
    }

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏° jobs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    static startAllJobs() {
        console.log('‚ñ∂Ô∏è  Starting all cron jobs...');
        
        for (const [name, job] of this.jobs.entries()) {
            job.task.start();
        }
        
        console.log(`‚úÖ Started ${this.jobs.size} cron jobs`);
    }
}

module.exports = CronScheduler;