<!DOCTYPE html>
<html lang="th">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= csrfToken %>">
    <title>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° - Admin Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fa;
            min-height: 100vh;
            font-size: 14px;
        }

        /* Layout */
        .admin-layout {
            display: flex;
            min-height: 100vh;
            position: relative;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: white;
            box-shadow: 2px 0 12px rgba(0, 0, 0, 0.08);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: fixed;
            height: 100vh;
            z-index: 1000;
            left: 0;
            top: 0;
        }

        .sidebar.collapsed {
            transform: translateX(-100%);
        }

        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .sidebar-overlay.show {
            display: block;
            opacity: 1;
        }

        .sidebar-header {
            padding: 24px 20px;
            border-bottom: 1px solid #e0e0e0;
            background: linear-gradient(45deg, #2196f3, #21cbf3);
            color: white;
        }

        .sidebar-title {
            font-size: 18px;
            font-weight: 600;
        }

        .sidebar-nav {
            padding: 20px 0;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            color: #666;
            text-decoration: none;
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
            font-size: 15px;
        }

        .nav-item:hover,
        .nav-item.active {
            background: #e3f2fd;
            color: #1976d2;
            border-left-color: #2196f3;
        }

        .nav-item::before {
            margin-right: 12px;
            font-size: 16px;
        }

        /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î icon ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° class */
        .nav-item.transactions::before {
            content: 'üìä';
        }

        .nav-item.fortune-test::before {
            content: 'üîÆ';
        }

        .nav-item.members::before {
            content: 'üë•';
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            min-height: 100vh;
        }

        .main-content.expanded {
            margin-left: 0;
        }

        /* Topbar */
        .topbar {
            background: white;
            padding: 16px 24px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .topbar-left {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .toggle-sidebar {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #666;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
        }

        .toggle-sidebar:hover {
            background: #f0f0f0;
            color: #2196f3;
        }

        .toggle-sidebar:active {
            transform: scale(0.95);
        }

        .page-title-small {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 16px;
            font-size: 14px;
        }

        .user-name {
            color: #666;
            font-weight: 500;
        }

        .logout-btn {
            background: #f44336;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: #d32f2f;
            transform: translateY(-1px);
        }

        /* Page Content */
        .page-content {
            padding: 24px;
        }

        .page-header {
            margin-bottom: 24px;
        }

        .page-title {
            font-size: clamp(20px, 4vw, 28px);
            color: #333;
            margin-bottom: 8px;
            font-weight: 700;
        }

        .page-subtitle {
            color: #666;
            font-size: clamp(13px, 3vw, 15px);
        }

        /* Filters */
        .filters {
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
            margin-bottom: 24px;
        }

        .filter-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            align-items: end;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-label {
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
            font-size: 14px;
        }

        .filter-input {
            padding: 12px 16px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: #fafafa;
        }

        .filter-input:focus {
            outline: none;
            border-color: #2196f3;
            background: white;
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
        }

        .filter-btn {
            padding: 12px 24px;
            background: #2196f3;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            height: fit-content;
        }

        .filter-btn:hover {
            background: #1976d2;
            transform: translateY(-2px);
        }

        /* Table Container */
        .table-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
            overflow: hidden;
            margin-bottom: 24px;
        }

        .table-wrapper {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            min-width: 700px;
        }

        .table th {
            background: #f8f9fa;
            padding: 16px 12px;
            text-align: left;
            font-weight: 600;
            color: #333;
            border-bottom: 2px solid #e0e0e0;
            font-size: 14px;
            white-space: nowrap;
        }

        .table td {
            padding: 16px 12px;
            border-bottom: 1px solid #e0e0e0;
            font-size: 14px;
            vertical-align: middle;
        }

        .table tbody tr {
            transition: background-color 0.2s ease;
        }

        .table tbody tr:hover {
            background: #f8f9fa;
        }

        /* Status badges */
        .status-badge {
            /* padding: 6px 12px; */
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            white-space: nowrap;
        }

        .status-bg {
            color: #737272;
            font-size: 12px;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
            padding: 5px;
        }

        .status-completed {
            background: #d4edda;
            color: #155724;
            padding: 5px;
        }

        .status-canceled {
            background: #f8d7da;
            color: #721c24;
            padding: 5px;
        }

        /* Action buttons */
        .action-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
            white-space: nowrap;
        }

        .btn:hover {
            transform: translateY(-1px);
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        /* Pagination */
        .pagination-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
            padding: 24px;
            margin-bottom: 24px;
        }

        .pagination-info {
            text-align: center;
            margin-bottom: 20px;
            color: #666;
            font-size: 14px;
            font-weight: 500;
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .pagination-btn {
            background: white;
            border: 1px solid #ddd;
            color: #333;
            padding: 10px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            min-width: 44px;
            min-height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .pagination-btn:hover:not(:disabled) {
            background: #2196f3;
            color: white;
            border-color: #2196f3;
            transform: translateY(-1px);
        }

        .pagination-btn.active {
            background: #2196f3;
            color: white;
            border-color: #2196f3;
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background: #f5f5f5;
        }

        /* Loading State */
        .loading-container {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 60px 20px;
            color: #666;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #e0e0e0;
            border-top: 3px solid #2196f3;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 12px;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 2000;
            align-items: center;
            justify-content: center;
            padding: 16px;
        }

        .modal.show {
            display: flex;
        }

        /* Modal Content */
        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 24px;
            max-width: 500px;
            width: 100%;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            animation: fadeIn 0.3s ease;
        }

        /* Modal Header */
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }

        .modal-close-btn {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #666;
            transition: all 0.3s ease;
        }

        .modal-close-btn:hover {
            color: #000;
        }

        /* Modal Body */
        .modal-body {
            font-size: 14px;
            color: #666;
            line-height: 1.5;
        }

        /* Modal Footer */
        .modal-footer {
            margin-top: 16px;
            text-align: right;
        }

        /* Button Styles */
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        /* Animation */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: scale(0.9);
            }

            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        .balance-container {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 16px;
        }

        .balance-btn {
            padding: 12px 24px;
            background: #4caf50;
            /* ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß */
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .balance-btn:hover {
            background: #388e3c;
            /* ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover */
            transform: translateY(-2px);
        }

        .balance-btn:active {
            transform: scale(0.98);
        }

        .balance-icon {
            font-size: 18px;
        }
    </style>
</head>

<body>
    <div class="admin-layout">
        <!-- Sidebar Overlay -->
        <div class="sidebar-overlay" id="sidebarOverlay"></div>

        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2 class="sidebar-title">Admin Dashboard</h2>
            </div>
            <nav class="sidebar-nav">
                <a href="/admin/transactions" class="nav-item transactions active"
                    onclick="setActivePage('transactions')">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</a>
                <a href="/admin/fortune-test" class="nav-item fortune-test"
                    onclick="setActivePage('fortune-test')">‡∏ó‡∏î‡∏™‡∏≠‡∏ö Fortune</a>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content" id="mainContent">
            <!-- Topbar -->
            <header class="topbar">
                <div class="topbar-left">
                    <button class="toggle-sidebar" id="toggleSidebar" aria-label="Toggle Sidebar">
                        <span id="toggleIcon">‚ò∞</span>
                    </button>
                    <h1 class="page-title-small">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</h1>
                </div>
                <div class="user-info">
                    <span class="user-name">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, <%= admin?.username || 'Admin' %></span>
                    <button class="logout-btn" onclick="logout()">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
                </div>
            </header>

            <!-- Page Content -->
            <div class="page-content">
                <div class="page-header">
                    <h1 class="page-title">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</h1>
                    <p class="page-subtitle">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</p>
                </div>

                <div class="balance-container">
                    <button class="balance-btn" type="button" onclick="checkBalance()">
                        <span class="balance-icon">üí∞</span> ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                    </button>
                </div>

                <!-- Filters -->
                <div class="filters">
                    <div class="filter-row">
                        <div class="filter-group">
                            <label class="filter-label">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</label>
                            <input type="text" class="filter-input" id="nameFilter" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
                            <input type="date" class="filter-input" id="dateFilter">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
                            <select class="filter-input" id="statusFilter">
                                <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                                <option value="pending">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
                                <option value="completed">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</option>
                                <option value="canceled">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <button class="filter-btn" type="button" onclick="filtersTransaction(true)">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
                        </div>
                    </div>
                </div>
                <!-- Table -->
                <div class="table-container">
                    <div class="table-wrapper">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</th>
                                    <th>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á</th>
                                    <th>‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô</th>
                                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                    <th>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                                </tr>
                            </thead>
                            <tbody id="transactionTable"> <%- include('transactionTable') %> </tbody>
                        </table>
                    </div>
                </div>

                <!-- Pagination -->
                <div class="pagination-container" id="paginationContainer" style="display: none;">
                    <div class="pagination-info" id="paginationInfo">
                    </div>
                    <div class="pagination" id="pagination">
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal" id="confirmModal">
        <input type="hidden" id="transactionId">
        <input type="hidden" id="transactionName">
        <input type="hidden" id="transactionpackage_id">
        <input type="hidden" id="transactionuser_id">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h3>
                <p class="modal-message" id="modalMessage">‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</p>
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal()">‡∏õ‡∏¥‡∏î</button>
                <button class="btn btn-success" id="confirmBtn" onclick="confirmAction()">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
            </div>
        </div>
    </div>

    <!-- Toast -->
    <div class="toast" id="toast"></div>

    <!-- Balance Modal -->
    <div class="modal" id="balanceModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</h3>
                <button class="modal-close-btn" onclick="closeBalanceModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div id="balanceInfo" style="color: #333; font-weight: 500;"></div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeBalanceModal()">‡∏õ‡∏¥‡∏î</button>
            </div>
        </div>
    </div>

    <script>
        // Pagination variables
        let currentPage = 1;
        let itemsPerPage = 10;
        let nextlitmit = 0;
        let endlitmit = 10;
        let totalRecords = parseInt('<%= total_record %>') || 0; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        let totalPages = Math.ceil(totalRecords / itemsPerPage); // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        let isLoading = false;
        let currentAction = null;
        let currentTransactionId = null;
        let isMobile = window.innerWidth <= 767;

        // DOM Elements
        const sidebar = document.getElementById('sidebar');
        const sidebarOverlay = document.getElementById('sidebarOverlay');
        const mainContent = document.getElementById('mainContent');
        const toggleSidebar = document.getElementById('toggleSidebar');
        const toggleIcon = document.getElementById('toggleIcon');
        const modal = document.getElementById('confirmModal');
        const toast = document.getElementById('toast');
        const transactionTable = document.getElementById('transactionTable');
        const paginationContainer = document.getElementById('paginationContainer');
        paginationInfo = document.getElementById('paginationInfo');
        const pagination = document.getElementById('pagination');


        // Initialize
        document.addEventListener('DOMContentLoaded', function () {
            // setLoading(true);
            setupEventListeners();
            handleResize();
            renderPagination();
        });

        // Action
        function filtersTransaction(fromClick = false) {
            // ‡∏´‡∏≤‡∏Å‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (fromClick = true) ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï currentPage ‡πÄ‡∏õ‡πá‡∏ô 1
            if (fromClick) {
                currentPage = 1;
                nextlitmit = 0;
                endlitmit = itemsPerPage;
            }

            // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
            const requestBody = {
                memberName: document.getElementById('nameFilter').value,
                date: document.getElementById('dateFilter').value,
                status: document.getElementById('statusFilter').value,
                nextlitmit: nextlitmit,
                endlitmit: endlitmit,
                itemsPerPage: itemsPerPage
            };

            // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà fromClick ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° currentPage ‡∏•‡∏á‡πÉ‡∏ô body
            if (!fromClick) {
                requestBody.currentPage = currentPage;
            }

            fetch('/admin/transactions', {
                method: 'POST',
                credentials: 'include', // Include cookies for session management
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify(requestBody)
            })
                .then(response => response.json()) // Add this line to convert response to JSON
                .then((data) => {
                    if (data.success) {
                        document.getElementById('transactionTable').innerHTML = data.html;
                        totalRecords = data.totalRecords || 0; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        totalPages = Math.ceil(totalRecords / itemsPerPage); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        currentPage = data.currentPage || 1; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                        renderPagination(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï pagination ‡πÉ‡∏´‡∏°‡πà
                    } else {
                        console.error('Error fetching transactions:', data.message);
                    }
                })
                .catch((err) => console.error('Fetch error:', err));
        }

        async function confirmAction() {
            const TagtransactionId = document.getElementById('transactionId').value;
            const TagtransactionName = document.getElementById('transactionName').value;
            const user_id = document.getElementById('transactionuser_id').value;
            const package_id = document.getElementById('transactionpackage_id').value;
            if (!currentTransactionId || !currentAction) return;
            if (TagtransactionId != currentTransactionId) return;

            // Update transaction status
            let ActionStatus = currentAction === 'approve' ? 'approved' : 'rejected';
            let dataBody = {
                transactionId: TagtransactionId,
                nameuser: TagtransactionName,
                status: currentAction === 'approve' ? 'completed' : 'canceled',
                userId: user_id,
                packageId: package_id
            }
            await updateTransaction(dataBody);
            closeModal();
        }

        async function updateTransaction(actions) {
            fetch('/admin/transactions/update', {
                method: 'POST',
                credentials: 'include', // Include cookies for session management
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ actions })
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        showToast(
                            `‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á "${actions.nameuser}" ‡πÑ‡∏î‡πâ${actions.status === 'approve' ? '‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' : '‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'}‡πÅ‡∏•‡πâ‡∏ß`,
                            'success'
                        );
                        filtersTransaction();
                        return true;
                    } else {
                        showToast(
                            `‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á "${actions.nameuser}" ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î `,
                            'error'
                        );
                        console.error('Error updating transaction:', data.message);
                        return false;
                    }
                })
                .catch(err => {
                    console.error('Fetch error:', err);
                    showToast(
                        `‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á "${actions.nameuser}" ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î `,
                        'error'
                    );
                    return false;
                });
        }

        async function goToPage(page) {
            if (page < 1 || page > totalPages || page === currentPage || isLoading) {
                return;
            }
            if (page > currentPage) {
                nextlitmit = nextlitmit + itemsPerPage;
                endlitmit = endlitmit + itemsPerPage;
            } else {
                nextlitmit = nextlitmit - itemsPerPage;
                endlitmit = endlitmit - itemsPerPage;
            }
            currentPage = page;
            filtersTransaction();
        }

        async function fastpage(mod) {
            if (mod === 'first') {
                currentPage = 1;
                nextlitmit = 0;
                endlitmit = itemsPerPage;
            } else if (mod === 'last') {
                currentPage = totalPages;
                nextlitmit = (totalPages - 1) * itemsPerPage;
                endlitmit = totalRecords;
            } else {
                return; // Invalid action
            }
            filtersTransaction();
        }


        // Render pagination
        function renderPagination() {
            if (totalRecords <= 0) {
                paginationContainer.style.display = 'none';
                return;
            }

            paginationContainer.style.display = 'block';
            const startItem = totalRecords === 0 ? 0 : (currentPage - 1) * itemsPerPage + 1;
            const endItem = Math.min(currentPage * itemsPerPage, totalRecords);

            paginationInfo.textContent = `‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${startItem}-${endItem} ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalRecords.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;

            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage < maxVisiblePages - 1) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            let paginationHTML = `
                <button class="pagination-btn" onclick="fastpage('first')" ${currentPage === 1 ? 'disabled' : ''}> ¬´¬´ </button>
                <button class="pagination-btn" onclick="goToPage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}> ‚Äπ </button>
            `;

            // Add page numbers
            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <button class="pagination-btn ${i === currentPage ? 'active' : ''}" onclick="goToPage(${i})">
                        ${i}
                    </button>
                `;
            }

            paginationHTML += `
                <button class="pagination-btn" onclick="goToPage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}> ‚Ä∫ </button>
                <button class="pagination-btn" onclick="fastpage('last')" ${currentPage === totalPages ? 'disabled' : ''}> ¬ª¬ª </button>
            `;

            pagination.innerHTML = paginationHTML;
        }

        // Set loading state
        function setLoading(loading) {
            isLoading = loading;
            if (loading) {
                transactionTable.innerHTML = `
                    <tr>
                        <td colspan="1" class="loading-container">
                            <div class="loading-spinner"></div>
                            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>
                        </td>
                    </tr>
                `;
            }
        }

        // Event Listeners
        function setupEventListeners() {
            // Sidebar toggle
            toggleSidebar.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                toggleSidebarVisibility();
            });

            // Sidebar overlay
            sidebarOverlay.addEventListener('click', function () {
                closeSidebar();
            });

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡∏Å Event Listener ‡∏ã‡πâ‡∏≥
            const searchButton = document.querySelector('.filter-btn');
            searchButton.removeEventListener('click', filtersTransaction); // ‡∏•‡∏ö Event Listener ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
            searchButton.addEventListener('click', filtersTransaction); // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡πÉ‡∏´‡∏°‡πà

            // Window resize
            window.addEventListener('resize', debounce(handleResize, 250));
        }
        // Handle window resize
        function handleResize() {
            const newIsMobile = window.innerWidth <= 767;

            if (newIsMobile !== isMobile) {
                isMobile = newIsMobile;

                if (isMobile) {
                    // Switch to mobile mode
                    sidebar.classList.remove('show');
                    sidebar.classList.add('collapsed');
                    mainContent.classList.add('expanded');
                    sidebarOverlay.classList.remove('show');
                    updateToggleIcon(false);
                } else {
                    // Switch to desktop mode
                    sidebar.classList.remove('collapsed', 'show');
                    mainContent.classList.remove('expanded');
                    sidebarOverlay.classList.remove('show');
                    updateToggleIcon(true);
                    document.body.style.overflow = '';
                }
            }
        }

        // Toggle sidebar visibility
        function toggleSidebarVisibility() {
            if (isMobile) {
                // Mobile behavior
                const isOpen = sidebar.classList.contains('show');
                if (isOpen) {
                    closeSidebar();
                } else {
                    openSidebar();
                }
            } else {
                // Desktop behavior
                const isCollapsed = sidebar.classList.contains('collapsed');
                if (isCollapsed) {
                    sidebar.classList.remove('collapsed');
                    mainContent.classList.remove('expanded');
                    updateToggleIcon(true);
                } else {
                    sidebar.classList.add('collapsed');
                    mainContent.classList.add('expanded');
                    updateToggleIcon(false);
                }
            }
        }

        // Open sidebar (mobile)
        function openSidebar() {
            sidebar.classList.add('show');
            sidebarOverlay.classList.add('show');
            document.body.style.overflow = 'hidden';
            updateToggleIcon(true);
        }

        // Close sidebar (mobile)
        function closeSidebar() {
            sidebar.classList.remove('show');
            sidebarOverlay.classList.remove('show');
            document.body.style.overflow = '';
            updateToggleIcon(false);
        }

        // Update toggle icon
        function updateToggleIcon(isOpen) {
            toggleIcon.textContent = isOpen ? '‚úï' : '‚ò∞';
        }

        // Set active page
        function setActivePage(page) {
            // Update navigation
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });

            if (page === 'transactions') {
                document.querySelector('.nav-item:not(.members)').classList.add('active');
            } else {
                document.querySelector('.nav-item.members').classList.add('active');
            }

            // Close sidebar on mobile after selection
            if (isMobile) {
                closeSidebar();
            }

            // In a real app, you would navigate to different pages here
            console.log('Navigate to:', page);
        }

        // Show confirmation modal
        function showConfirmModal(transactionId, amount, memberName, uid, package_id, action) {
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            const confirmBtn = document.getElementById('confirmBtn');
            document.getElementById('transactionId').value = `${transactionId}`;
            document.getElementById('transactionName').value = `${memberName}`;
            document.getElementById('transactionuser_id').value = `${uid}`;
            document.getElementById('transactionpackage_id').value = `${package_id}`;

            currentTransactionId = transactionId;
            currentAction = action;

            if (action === 'approve') {
                modalTitle.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°';
                modalMessage.textContent = `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á "${transactionId}"  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ø${amount.toLocaleString()} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
                confirmBtn.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô';
                confirmBtn.className = 'btn btn-success';
            } else {
                modalTitle.textContent = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°';
                modalMessage.textContent = `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á "${transactionId}" ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ø${amount.toLocaleString()} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
                confirmBtn.textContent = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
                confirmBtn.className = 'btn btn-danger';
            }

            modal.classList.add('show');
            document.body.style.overflow = 'hidden';
        }

        // Close modal
        function closeModal() {
            modal.classList.remove('show');
            document.body.style.overflow = '';
            currentTransactionId = null;
            currentAction = null;
        }

        // Show toast notification
        function showToast(message, type = 'success') {
            toast.textContent = message;
            toast.className = `toast toast-${type} show`;

            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }

        // Utility functions
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('th-TH', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
            });
        }

        function getStatusText(status) {
            const statusMap = {
                'pending': '‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                'completed': '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
                'canceled': '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
                'expired': '‚õî ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß'
            };
            return statusMap[status] || status;
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function logout() {
            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                fetch('/admin/logout', { method: 'POST' }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö session
                    .then(response => {
                        if (response.ok) {
                            showToast('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß', 'success');
                            setTimeout(() => {
                                window.location.href = '/admin/login'; // Redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ login
                            }, 1000);
                        } else {
                            showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Logout error:', error);
                        showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'error');
                    });
            }
        }

        async function checkBalance() {
            try {
                const response = await fetch('/admin/balance', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success && data.data) {
                    const balanceInfo = `
                        <p><strong>‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô:</strong> ${data.data.application}</p>
                        <p><strong>‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ:</strong> ${data.data.usedQuota} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                        <p><strong>‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:</strong> ${data.data.maxQuota} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                        <p><strong>‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</strong> ${data.data.remainingQuota} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                        <p><strong>‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</strong> ${data.data.currentCredit} ‡∏ö‡∏≤‡∏ó</p>
                        <p><strong>‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏:</strong> ${new Date(data.data.expiredAt).toLocaleDateString('th-TH', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    })}</p>
                    `;

                    document.getElementById('balanceInfo').innerHTML = balanceInfo;
                    openBalanceModal();
                } else {
                    showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ', 'error');
                }
            } catch (error) {
                console.error('Error fetching balance:', error);
                showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'error');
            }
        }

        function openBalanceModal() {
            const modal = document.getElementById('balanceModal');
            modal.classList.add('show');
            document.body.style.overflow = 'hidden';
        }

        function closeBalanceModal() {
            const modal = document.getElementById('balanceModal');
            modal.classList.remove('show');
            document.body.style.overflow = '';
        }
    </script>
</body>

</html>