<!DOCTYPE html>
<html lang="th">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° - Admin Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fa;
            min-height: 100vh;
            font-size: 14px;
        }

        /* Layout */
        .admin-layout {
            display: flex;
            min-height: 100vh;
            position: relative;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: white;
            box-shadow: 2px 0 12px rgba(0, 0, 0, 0.08);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: fixed;
            height: 100vh;
            z-index: 1000;
            left: 0;
            top: 0;
        }

        .sidebar.collapsed {
            transform: translateX(-100%);
        }

        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .sidebar-overlay.show {
            display: block;
            opacity: 1;
        }

        .sidebar-header {
            padding: 24px 20px;
            border-bottom: 1px solid #e0e0e0;
            background: linear-gradient(45deg, #2196f3, #21cbf3);
            color: white;
        }

        .sidebar-title {
            font-size: 18px;
            font-weight: 600;
        }

        .sidebar-nav {
            padding: 20px 0;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            color: #666;
            text-decoration: none;
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
            font-size: 15px;
        }

        .nav-item:hover,
        .nav-item.active {
            background: #e3f2fd;
            color: #1976d2;
            border-left-color: #2196f3;
        }

        .nav-item::before {
            content: 'üìä';
            margin-right: 12px;
            font-size: 16px;
        }

        .nav-item.members::before {
            content: 'üë•';
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            min-height: 100vh;
        }

        .main-content.expanded {
            margin-left: 0;
        }

        /* Topbar */
        .topbar {
            background: white;
            padding: 16px 24px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .topbar-left {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .toggle-sidebar {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #666;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
        }

        .toggle-sidebar:hover {
            background: #f0f0f0;
            color: #2196f3;
        }

        .toggle-sidebar:active {
            transform: scale(0.95);
        }

        .page-title-small {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 16px;
            font-size: 14px;
        }

        .user-name {
            color: #666;
            font-weight: 500;
        }

        .logout-btn {
            background: #f44336;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: #d32f2f;
            transform: translateY(-1px);
        }

        /* Page Content */
        .page-content {
            padding: 24px;
        }

        .page-header {
            margin-bottom: 24px;
        }

        .page-title {
            font-size: clamp(20px, 4vw, 28px);
            color: #333;
            margin-bottom: 8px;
            font-weight: 700;
        }

        .page-subtitle {
            color: #666;
            font-size: clamp(13px, 3vw, 15px);
        }

        /* Filters */
        .filters {
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
            margin-bottom: 24px;
        }

        .filter-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            align-items: end;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-label {
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
            font-size: 14px;
        }

        .filter-input {
            padding: 12px 16px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: #fafafa;
        }

        .filter-input:focus {
            outline: none;
            border-color: #2196f3;
            background: white;
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
        }

        .filter-btn {
            padding: 12px 24px;
            background: #2196f3;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            height: fit-content;
        }

        .filter-btn:hover {
            background: #1976d2;
            transform: translateY(-2px);
        }

        /* Table Container */
        .table-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
            overflow: hidden;
            margin-bottom: 24px;
        }

        .table-wrapper {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            min-width: 700px;
        }

        .table th {
            background: #f8f9fa;
            padding: 16px 12px;
            text-align: left;
            font-weight: 600;
            color: #333;
            border-bottom: 2px solid #e0e0e0;
            font-size: 14px;
            white-space: nowrap;
        }

        .table td {
            padding: 16px 12px;
            border-bottom: 1px solid #e0e0e0;
            font-size: 14px;
            vertical-align: middle;
        }

        .table tbody tr {
            transition: background-color 0.2s ease;
        }

        .table tbody tr:hover {
            background: #f8f9fa;
        }

        /* Status badges */
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            white-space: nowrap;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-approved {
            background: #d4edda;
            color: #155724;
        }

        .status-rejected {
            background: #f8d7da;
            color: #721c24;
        }

        /* Action buttons */
        .action-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
            white-space: nowrap;
        }

        .btn:hover {
            transform: translateY(-1px);
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        /* Pagination */
        .pagination-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
            padding: 24px;
            margin-bottom: 24px;
        }

        .pagination-info {
            text-align: center;
            margin-bottom: 20px;
            color: #666;
            font-size: 14px;
            font-weight: 500;
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .pagination-btn {
            background: white;
            border: 1px solid #ddd;
            color: #333;
            padding: 10px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            min-width: 44px;
            min-height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .pagination-btn:hover:not(:disabled) {
            background: #2196f3;
            color: white;
            border-color: #2196f3;
            transform: translateY(-1px);
        }

        .pagination-btn.active {
            background: #2196f3;
            color: white;
            border-color: #2196f3;
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background: #f5f5f5;
        }

        /* Loading State */
        .loading-container {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 60px 20px;
            color: #666;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #e0e0e0;
            border-top: 3px solid #2196f3;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 12px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 2000;
            align-items: center;
            justify-content: center;
            padding: 16px;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 0;
            max-width: 500px;
            width: 100%;
            max-height: 90vh;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            animation: modalSlide 0.3s ease;
        }

        @keyframes modalSlide {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            padding: 24px;
            border-bottom: 1px solid #e0e0e0;
            background: #f8f9fa;
        }

        .modal-title {
            font-size: 18px;
            color: #333;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .modal-message {
            color: #666;
            font-size: 14px;
            line-height: 1.5;
        }

        .modal-actions {
            padding: 24px;
            border-top: 1px solid #e0e0e0;
            background: #f8f9fa;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        /* Toast */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 3000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: calc(100vw - 40px);
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast-success {
            background: #28a745;
        }

        .toast-error {
            background: #dc3545;
        }

        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state-icon {
            font-size: 48px;
            margin-bottom: 16px;
        }

        /* Tablet Styles */
        @media (min-width: 768px) and (max-width: 1024px) {
            .sidebar {
                width: 260px;
            }

            .main-content {
                margin-left: 260px;
            }

            .page-content {
                padding: 20px;
            }

            .filter-row {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Mobile Styles */
        @media (max-width: 767px) {
            .sidebar {
                width: 280px;
                transform: translateX(-100%);
            }

            .sidebar.show {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .topbar {
                padding: 12px 16px;
            }

            .page-content {
                padding: 16px;
            }

            .page-header {
                margin-bottom: 16px;
            }

            .filters {
                padding: 16px;
                margin-bottom: 16px;
            }

            .filter-row {
                grid-template-columns: 1fr;
                gap: 12px;
            }

            .filter-btn {
                width: 100%;
                padding: 14px;
            }

            .table {
                min-width: 600px;
                font-size: 13px;
            }

            .table th,
            .table td {
                padding: 12px 8px;
            }

            .action-buttons {
                flex-direction: column;
                gap: 4px;
            }

            .btn {
                padding: 10px 12px;
                font-size: 13px;
            }

            .modal-content {
                max-width: 100%;
                margin: 16px;
            }

            .modal-header,
            .modal-actions {
                padding: 20px;
            }

            .toast {
                right: 16px;
                top: 16px;
                left: 16px;
                transform: translateY(-100%);
                max-width: none;
            }

            .toast.show {
                transform: translateY(0);
            }

            .user-info {
                gap: 8px;
            }

            .user-name {
                display: none;
            }

            .pagination {
                gap: 4px;
            }

            .pagination-btn {
                min-width: 36px;
                min-height: 36px;
                padding: 8px 12px;
                font-size: 13px;
            }

            .pagination-container {
                padding: 16px;
            }
        }

        /* Extra small mobile */
        @media (max-width: 375px) {
            .page-content {
                padding: 12px;
            }

            .filters {
                padding: 12px;
            }

            .table {
                min-width: 500px;
                font-size: 12px;
            }

            .table th,
            .table td {
                padding: 8px 6px;
            }
        }

        /* Large desktop */
        @media (min-width: 1200px) {
            .sidebar {
                width: 300px;
            }

            .main-content {
                margin-left: 300px;
            }

            .page-content {
                padding: 32px;
            }

            .filter-row {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        /* High DPI displays */
        @media (-webkit-min-device-pixel-ratio: 2) {
            .table {
                -webkit-font-smoothing: antialiased;
            }
        }
    </style>
</head>

<body>
    <div class="admin-layout">
        <!-- Sidebar Overlay -->
        <div class="sidebar-overlay" id="sidebarOverlay"></div>

        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2 class="sidebar-title">Admin Dashboard</h2>
            </div>
            <nav class="sidebar-nav">
                <a href="/admin/transactions" class="nav-item active" onclick="setActivePage('transactions')">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</a>
                <a href="/admin/members" class="nav-item members" onclick="setActivePage('members')">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</a>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content" id="mainContent">
            <!-- Topbar -->
            <header class="topbar">
                <div class="topbar-left">
                    <button class="toggle-sidebar" id="toggleSidebar" aria-label="Toggle Sidebar">
                        <span id="toggleIcon">‚ò∞</span>
                    </button>
                    <h1 class="page-title-small">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</h1>
                </div>
                <div class="user-info">
                    <span class="user-name">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, Admin</span>
                    <button class="logout-btn" onclick="logout()">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
                </div>
            </header>

            <!-- Page Content -->
            <div class="page-content">
                <div class="page-header">
                    <h1 class="page-title">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</h1>
                    <p class="page-subtitle">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</p>
                </div>

                <!-- Filters -->
                <div class="filters">
                    <div class="filter-row">
                        <div class="filter-group">
                            <label class="filter-label">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠/‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á)</label>
                            <input type="text" class="filter-input" id="searchInput" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
                            <input type="date" class="filter-input" id="dateFilter">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
                            <select class="filter-input" id="statusFilter">
                                <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                                <option value="pending">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
                                <option value="approved">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</option>
                                <option value="rejected">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <button class="filter-btn" onclick="applyFilters()">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
                        </div>
                    </div>
                </div>

                <!-- Table -->
                <div class="table-container">
                    <div class="table-wrapper">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</th>
                                    <th>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á</th>
                                    <th>‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô</th>
                                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                    <th>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                                </tr>
                            </thead>
                            <tbody id="transactionTable">
                                <!-- Data will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Pagination -->
                <div class="pagination-container" id="paginationContainer" style="display: none;">
                    <div class="pagination-info" id="paginationInfo">
                        <!-- Pagination info will be populated by JavaScript -->
                    </div>
                    <div class="pagination" id="pagination">
                        <!-- Pagination buttons will be populated by JavaScript -->
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal" id="confirmModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h3>
                <p class="modal-message" id="modalMessage">‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</p>
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal()">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                <button class="btn btn-success" id="confirmBtn" onclick="confirmAction()">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
            </div>
        </div>
    </div>

    <!-- Toast -->
    <div class="toast" id="toast"></div>

    <script>
        // Sample transaction data (simulate API response)
        let allTransactions = [
            {
                id: 1,
                date: '2025-05-29',
                memberName: '‡∏ì‡∏±‡∏ê‡∏û‡∏á‡∏®‡πå ‡πÉ‡∏à‡∏î‡∏µ',
                channel: 'PromptPay',
                amount: 499,
                status: 'pending',
                transactionId: 'TXN001234567',
                phoneNumber: '081-234-5678',
                time: '14:30:25'
            },
            {
                id: 2,
                date: '2025-05-29',
                memberName: '‡∏≠‡∏≤‡∏£‡πå‡∏°‡∏µ‡πà ‡∏™‡∏∏‡∏Ç‡∏™‡∏±‡∏ô‡∏ï‡πå',
                channel: 'Mobile Banking',
                amount: 999,
                status: 'approved',
                transactionId: 'TXN001234568',
                phoneNumber: '089-876-5432',
                time: '09:15:10'
            },
            {
                id: 3,
                date: '2025-05-28',
                memberName: '‡∏°‡∏¥‡πâ‡∏ô‡∏ï‡πå ‡∏´‡∏ß‡∏≤‡∏ô‡πÉ‡∏à',
                channel: 'PromptPay',
                amount: 299,
                status: 'pending',
                transactionId: 'TXN001234569',
                phoneNumber: '092-555-1234',
                time: '16:45:33'
            },
            {
                id: 4,
                date: '2025-05-28',
                memberName: '‡πÄ‡∏à‡∏°‡∏™‡πå ‡∏Ñ‡∏π‡∏•‡πÅ‡∏°‡∏ô',
                channel: 'Bank Transfer',
                amount: 799,
                status: 'rejected',
                transactionId: 'TXN001234570',
                phoneNumber: '083-999-8888',
                time: '11:20:45'
            },
            {
                id: 5,
                date: '2025-05-27',
                memberName: '‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á ‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô',
                channel: 'PromptPay',
                amount: 1299,
                status: 'approved',
                transactionId: 'TXN001234571',
                phoneNumber: '086-777-6666',
                time: '13:10:15'
            },
            {
                id: 6,
                date: '2025-05-27',
                memberName: '‡∏•‡∏¥‡∏ã‡πà‡∏≤ ‡∏Å‡∏¥‡∏°‡∏à‡∏¥',
                channel: 'Mobile Banking',
                amount: 599,
                status: 'pending',
                transactionId: 'TXN001234572',
                phoneNumber: '094-111-2222',
                time: '10:30:45'
            },
            {
                id: 7,
                date: '2025-05-26',
                memberName: '‡∏à‡∏≠‡∏´‡πå‡∏ô ‡∏™‡∏°‡∏¥‡∏ò',
                channel: 'PromptPay',
                amount: 399,
                status: 'approved',
                transactionId: 'TXN001234573',
                phoneNumber: '081-333-4444',
                time: '15:20:30'
            },
            {
                id: 8,
                date: '2025-05-26',
                memberName: '‡∏°‡∏≤‡∏£‡πå‡∏Ñ ‡∏ã‡∏±‡∏Ñ‡πÄ‡∏Ñ‡∏≠‡∏£‡πå',
                channel: 'Bank Transfer',
                amount: 1599,
                status: 'pending',
                transactionId: 'TXN001234574',
                phoneNumber: '089-555-7777',
                time: '08:45:15'
            },
            {
                id: 9,
                date: '2025-05-25',
                memberName: '‡πÄ‡∏ó‡∏¢‡πå‡πÄ‡∏•‡∏≠‡∏£‡πå ‡∏™‡∏ß‡∏¥‡∏ü‡∏ï‡πå',
                channel: 'PromptPay',
                amount: 899,
                status: 'approved',
                transactionId: 'TXN001234575',
                phoneNumber: '092-888-9999',
                time: '12:15:50'
            },
            {
                id: 10,
                date: '2025-05-25',
                memberName: '‡∏≠‡∏¥‡∏•‡∏≠‡∏ô ‡∏°‡∏±‡∏™‡∏Å‡πå',
                channel: 'Mobile Banking',
                amount: 2499,
                status: 'rejected',
                transactionId: 'TXN001234576',
                phoneNumber: '083-000-1111',
                time: '17:30:25'
            },
            {
                id: 11,
                date: '2025-05-24',
                memberName: '‡∏ö‡∏¥‡∏• ‡πÄ‡∏Å‡∏ï‡∏™‡πå',
                channel: 'Bank Transfer',
                amount: 1999,
                status: 'approved',
                transactionId: 'TXN001234577',
                phoneNumber: '081-222-3333',
                time: '09:00:00'
            },
            {
                id: 12,
                date: '2025-05-24',
                memberName: '‡∏™‡∏ï‡∏µ‡∏ü ‡∏à‡πá‡∏≠‡∏ö‡∏™‡πå',
                channel: 'PromptPay',
                amount: 799,
                status: 'pending',
                transactionId: 'TXN001234578',
                phoneNumber: '089-444-5555',
                time: '14:45:30'
            },
            {
                id: 13,
                date: '2025-05-23',
                memberName: '‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏ô ‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏ï',
                channel: 'Mobile Banking',
                amount: 3299,
                status: 'approved',
                transactionId: 'TXN001234579',
                phoneNumber: '092-666-7777',
                time: '11:30:15'
            },
            {
                id: 14,
                date: '2025-05-23',
                memberName: '‡πÄ‡∏à‡∏ü ‡πÄ‡∏ö‡πÇ‡∏ã‡∏™',
                channel: 'PromptPay',
                amount: 1599,
                status: 'pending',
                transactionId: 'TXN001234580',
                phoneNumber: '083-888-9999',
                time: '16:20:45'
            },
            {
                id: 15,
                date: '2025-05-22',
                memberName: '‡∏•‡∏≤‡∏£‡πå‡∏£‡∏µ‡πà ‡πÄ‡∏û‡∏à',
                channel: 'Bank Transfer',
                amount: 999,
                status: 'rejected',
                transactionId: 'TXN001234581',
                phoneNumber: '081-111-2222',
                time: '13:15:20'
            },
            {
                id: 16,
                date: '2025-05-22',
                memberName: '‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏¢‡πå ‡∏ö‡∏£‡∏¥‡∏ô',
                channel: 'PromptPay',
                amount: 699,
                status: 'approved',
                transactionId: 'TXN001234582',
                phoneNumber: '089-333-4444',
                time: '10:45:35'
            },
            {
                id: 17,
                date: '2025-05-21',
                memberName: '‡∏ó‡∏¥‡∏° ‡∏Ñ‡∏∏‡∏Å',
                channel: 'Mobile Banking',
                amount: 1299,
                status: 'pending',
                transactionId: 'TXN001234583',
                phoneNumber: '092-555-6666',
                time: '15:30:10'
            },
            {
                id: 18,
                date: '2025-05-21',
                memberName: '‡∏ã‡∏≤‡∏ï‡πå‡∏¢‡πà‡∏≤ ‡∏ô‡∏≤‡πÄ‡∏î‡∏•‡∏•‡∏≤',
                channel: 'PromptPay',
                amount: 899,
                status: 'approved',
                transactionId: 'TXN001234584',
                phoneNumber: '083-777-8888',
                time: '12:00:25'
            },
            {
                id: 19,
                date: '2025-05-20',
                memberName: '‡πÅ‡∏à‡πá‡∏Ñ ‡∏´‡∏°‡πà‡∏≤',
                channel: 'Bank Transfer',
                amount: 2199,
                status: 'rejected',
                transactionId: 'TXN001234585',
                phoneNumber: '081-999-0000',
                time: '08:30:55'
            },
            {
                id: 20,
                date: '2025-05-20',
                memberName: '‡∏õ‡∏≠‡∏ô‡∏µ‡πà ‡∏´‡∏°‡πà‡∏≤',
                channel: 'PromptPay',
                amount: 599,
                status: 'approved',
                transactionId: 'TXN001234586',
                phoneNumber: '089-111-2222',
                time: '17:45:40'
            }
        ];

        // Pagination variables
        let currentPage = 1;
        let itemsPerPage = 10;
        let totalItems = 0;
        let totalPages = 0;
        let filteredTransactions = [];
        let isLoading = false;
        let currentAction = null;
        let currentTransactionId = null;
        let isMobile = window.innerWidth <= 767;

        // DOM Elements
        const sidebar = document.getElementById('sidebar');
        const sidebarOverlay = document.getElementById('sidebarOverlay');  
        const mainContent = document.getElementById('mainContent');
        const toggleSidebar = document.getElementById('toggleSidebar');
        const toggleIcon = document.getElementById('toggleIcon');
        const modal = document.getElementById('confirmModal');
        const toast = document.getElementById('toast');
        const transactionTable = document.getElementById('transactionTable');
        const paginationContainer = document.getElementById('paginationContainer');
        const paginationInfo = document.getElementById('paginationInfo');
        const pagination = document.getElementById('pagination');

        // Simulate API delay
        function simulateAPIDelay(ms = 500) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        // Set loading state
        function setLoading(loading) {
            isLoading = loading;
            if (loading) {
                transactionTable.innerHTML = `
                    <tr>
                        <td colspan="6" class="loading-container">
                            <div class="loading-spinner"></div>
                            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>
                        </td>
                    </tr>
                `;
            }
        }

        // Simulate API call to fetch transactions
        async function fetchTransactions(page = 1, limit = 10, filters = {}) {
            setLoading(true);
            
            try {
                // Simulate API delay
                await simulateAPIDelay();
                
                // Apply filters to all transactions
                let filtered = allTransactions.filter(transaction => {
                    const matchesSearch = !filters.search ||
                        transaction.memberName.toLowerCase().includes(filters.search.toLowerCase()) ||
                        transaction.channel.toLowerCase().includes(filters.search.toLowerCase());
                    
                    const matchesDate = !filters.date || transaction.date === filters.date;
                    const matchesStatus = !filters.status || transaction.status === filters.status;
                    
                    return matchesSearch && matchesDate && matchesStatus;
                });
                
                // Calculate pagination
                const total = filtered.length;
                const totalPagesCalc = Math.ceil(total / limit);
                const startIndex = (page - 1) * limit;
                const endIndex = startIndex + limit;
                const data = filtered.slice(startIndex, endIndex);
                
                // Simulate API response structure
                return {
                    success: true,
                    data: data,
                    pagination: {
                        page: page,
                        limit: limit,
                        total: total,
                        totalPages: totalPagesCalc,
                        hasNextPage: page < totalPagesCalc,
                        hasPrevPage: page > 1
                    }
                };
            } catch (error) {
                return {
                    success: false,
                    message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
                    error: error.message
                };
            } finally {
                setLoading(false);
            }
        }

        // Get current filter values
        function getCurrentFilters() {
            return {
                search: document.getElementById('searchInput').value,
                date: document.getElementById('dateFilter').value,
                status: document.getElementById('statusFilter').value
            };
        }

        // Load filters from URL parameters
        function loadFiltersFromURL() {
            const params = new URLSearchParams(window.location.search);
            
            const searchInput = document.getElementById('searchInput');
            const dateFilter = document.getElementById('dateFilter');
            const statusFilter = document.getElementById('statusFilter');
            const pageSizeSelect = document.getElementById('pageSizeSelect');
            
            if (params.get('search')) searchInput.value = params.get('search');
            if (params.get('date')) dateFilter.value = params.get('date');
            if (params.get('status')) statusFilter.value = params.get('status');
            if (params.get('limit')) {
                const limit = parseInt(params.get('limit'));
                if ([5, 10, 20, 50].includes(limit)) {
                    pageSizeSelect.value = limit;
                    itemsPerPage = limit;
                }
            }
            if (params.get('page')) {
                currentPage = parseInt(params.get('page')) || 1;
            }
        }

        // Load transactions from API
        async function loadTransactions(page = 1) {
            const filters = getCurrentFilters();
            const response = await fetchTransactions(page, itemsPerPage, filters);
            
            if (response.success) {
                filteredTransactions = response.data;
                currentPage = response.pagination.page;
                totalItems = response.pagination.total;
                totalPages = response.pagination.totalPages;
                
                renderTransactions();
                renderPagination();
            } else {
                showToast(response.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error');
                renderEmptyState();
            }
        }

        // Render empty state
        function renderEmptyState() {
            transactionTable.innerHTML = `
                <tr>
                    <td colspan="6" class="empty-state">
                        <div class="empty-state-icon">üìä</div>
                        <div>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</div>
                    </td>
                </tr>
            `;
            paginationContainer.style.display = 'none';
        }

        // Render transactions
        function renderTransactions() {
            if (filteredTransactions.length === 0) {
                renderEmptyState();
                return;
            }

            transactionTable.innerHTML = filteredTransactions.map(transaction => `
                <tr>
                    <td>${formatDate(transaction.date)}</td>
                    <td><strong>${transaction.memberName}</strong></td>
                    <td>${transaction.channel}</td>
                    <td><strong>‡∏ø${transaction.amount.toLocaleString()}</strong></td>
                    <td><span class="status-badge status-${transaction.status}">${getStatusText(transaction.status)}</span></td>
                    <td>
                        <div class="action-buttons">
                            ${transaction.status === 'pending' ? `
                                <button class="btn btn-success" onclick="showConfirmModal(${transaction.id}, 'approve')">
                                    ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                                </button>
                                <button class="btn btn-danger" onclick="showConfirmModal(${transaction.id}, 'reject')">
                                    ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </button>
                            ` : `
                                <span style="color: #666; font-size: 12px;">‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß</span>
                            `}
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        // Render pagination
        function renderPagination() {
            if (totalPages <= 1) {
                paginationContainer.style.display = 'none';
                return;
            }
            
            paginationContainer.style.display = 'block';
            
            // Update pagination info
            const startItem = totalItems === 0 ? 0 : (currentPage - 1) * itemsPerPage + 1;
            const endItem = Math.min(currentPage * itemsPerPage, totalItems);
            
            paginationInfo.textContent = `‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${startItem}-${endItem} ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalItems.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
            
            // Generate pagination buttons
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
            
            // Adjust startPage if we're near the end
            if (endPage - startPage < maxVisiblePages - 1) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }
            
            let paginationHTML = `
                <button class="pagination-btn" onclick="goToPage(1)" ${currentPage === 1 ? 'disabled' : ''}>
                    ¬´¬´
                </button>
                <button class="pagination-btn" onclick="goToPage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>
                    ‚Äπ
                </button>
            `;
            
            // Add page numbers
            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <button class="pagination-btn ${i === currentPage ? 'active' : ''}" onclick="goToPage(${i})">
                        ${i}
                    </button>
                `;
            }
            
            paginationHTML += `
                <button class="pagination-btn" onclick="goToPage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>
                    ‚Ä∫
                </button>
                <button class="pagination-btn" onclick="goToPage(${totalPages})" ${currentPage === totalPages ? 'disabled' : ''}>
                    ¬ª¬ª
                </button>
            `;
            
            pagination.innerHTML = paginationHTML;
        }

        // Go to specific page
        async function goToPage(page) {
            if (page < 1 || page > totalPages || page === currentPage || isLoading) {
                return;
            }
            
            await loadTransactions(page);
            updateURLParams();
            
            // Scroll to top of table
            document.querySelector('.table-container').scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }

        // Change page size
        async function changePageSize() {
            const newPageSize = parseInt(document.getElementById('pageSizeSelect').value);
            if (newPageSize === itemsPerPage) return;
            
            itemsPerPage = newPageSize;
            currentPage = 1; // Reset to first page
            await loadTransactions(1);
            updateURLParams();
        }

        // Update URL parameters for bookmarking/sharing
        function updateURLParams() {
            const filters = getCurrentFilters();
            const params = new URLSearchParams();
            
            if (filters.search) params.set('search', filters.search);
            if (filters.date) params.set('date', filters.date);
            if (filters.status) params.set('status', filters.status);
            if (currentPage > 1) params.set('page', currentPage);
            if (itemsPerPage !== 10) params.set('limit', itemsPerPage);
            
            const newURL = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
            window.history.replaceState({}, '', newURL);
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function () {
            loadFiltersFromURL();
            loadTransactions(currentPage);
            setupEventListeners();
            handleResize();
        });

        // Event Listeners
        function setupEventListeners() {
            // Sidebar toggle
            toggleSidebar.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                toggleSidebarVisibility();
            });

            // Sidebar overlay
            sidebarOverlay.addEventListener('click', function () {
                closeSidebar();
            });

            // Search and filter inputs with debounce
            const searchInput = document.getElementById('searchInput');
            const dateFilter = document.getElementById('dateFilter');
            const statusFilter = document.getElementById('statusFilter');
            
            searchInput.addEventListener('input', debounce(applyFilters, 500));
            dateFilter.addEventListener('change', applyFilters);
            statusFilter.addEventListener('change', applyFilters);

            // Window resize
            window.addEventListener('resize', debounce(handleResize, 250));

            // Keyboard shortcuts
            document.addEventListener('keydown', function (e) {
                if (e.key === 'Escape') {
                    if (modal.classList.contains('show')) {
                        closeModal();
                    } else if (isMobile && sidebar.classList.contains('show')) {
                        closeSidebar();
                    }
                }
                
                // Pagination keyboard shortcuts (when not in input fields)
                if (!['INPUT', 'SELECT', 'TEXTAREA'].includes(e.target.tagName)) {
                    if (e.key === 'ArrowLeft' && currentPage > 1) {
                        e.preventDefault();
                        goToPage(currentPage - 1);
                    } else if (e.key === 'ArrowRight' && currentPage < totalPages) {
                        e.preventDefault();
                        goToPage(currentPage + 1);
                    } else if (e.key === 'Home') {
                        e.preventDefault();
                        goToPage(1);
                    } else if (e.key === 'End') {
                        e.preventDefault();
                        goToPage(totalPages);
                    }
                }
            });

            // Close modal when clicking outside
            modal.addEventListener('click', function (e) {
                if (e.target === modal) {
                    closeModal();
                }
            });

            // Prevent body scroll when sidebar is open on mobile
            sidebar.addEventListener('transitionstart', function () {
                if (isMobile) {
                    document.body.style.overflow = sidebar.classList.contains('show') ? 'hidden' : '';
                }
            });
        }

        // Handle window resize
        function handleResize() {
            const newIsMobile = window.innerWidth <= 767;

            if (newIsMobile !== isMobile) {
                isMobile = newIsMobile;

                if (isMobile) {
                    // Switch to mobile mode
                    sidebar.classList.remove('show');
                    sidebar.classList.add('collapsed');
                    mainContent.classList.add('expanded');
                    sidebarOverlay.classList.remove('show');
                    updateToggleIcon(false);
                } else {
                    // Switch to desktop mode
                    sidebar.classList.remove('collapsed', 'show');
                    mainContent.classList.remove('expanded');
                    sidebarOverlay.classList.remove('show');
                    updateToggleIcon(true);
                    document.body.style.overflow = '';
                }
            }
        }

        // Toggle sidebar visibility
        function toggleSidebarVisibility() {
            if (isMobile) {
                // Mobile behavior
                const isOpen = sidebar.classList.contains('show');
                if (isOpen) {
                    closeSidebar();
                } else {
                    openSidebar();
                }
            } else {
                // Desktop behavior
                const isCollapsed = sidebar.classList.contains('collapsed');
                if (isCollapsed) {
                    sidebar.classList.remove('collapsed');
                    mainContent.classList.remove('expanded');
                    updateToggleIcon(true);
                } else {
                    sidebar.classList.add('collapsed');
                    mainContent.classList.add('expanded');
                    updateToggleIcon(false);
                }
            }
        }

        // Open sidebar (mobile)
        function openSidebar() {
            sidebar.classList.add('show');
            sidebarOverlay.classList.add('show');
            document.body.style.overflow = 'hidden';
            updateToggleIcon(true);
        }

        // Close sidebar (mobile)
        function closeSidebar() {
            sidebar.classList.remove('show');
            sidebarOverlay.classList.remove('show');
            document.body.style.overflow = '';
            updateToggleIcon(false);
        }

        // Update toggle icon
        function updateToggleIcon(isOpen) {
            toggleIcon.textContent = isOpen ? '‚úï' : '‚ò∞';
        }

        // Set active page
        function setActivePage(page) {
            // Update navigation
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });

            if (page === 'transactions') {
                document.querySelector('.nav-item:not(.members)').classList.add('active');
            } else {
                document.querySelector('.nav-item.members').classList.add('active');
            }

            // Close sidebar on mobile after selection
            if (isMobile) {
                closeSidebar();
            }

            // In a real app, you would navigate to different pages here
            console.log('Navigate to:', page);
        }

        // Apply filters (reload from first page)
        async function applyFilters() {
            currentPage = 1;
            await loadTransactions(1);
            updateURLParams();
        }

        // Show confirmation modal
        function showConfirmModal(transactionId, action) {
            const transaction = allTransactions.find(t => t.id === transactionId);
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            const confirmBtn = document.getElementById('confirmBtn');

            currentTransactionId = transactionId;
            currentAction = action;

            if (action === 'approve') {
                modalTitle.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°';
                modalMessage.textContent = `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á "${transaction.memberName}" ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ø${transaction.amount.toLocaleString()} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
                confirmBtn.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô';
                confirmBtn.className = 'btn btn-success';
            } else {
                modalTitle.textContent = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°';
                modalMessage.textContent = `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á "${transaction.memberName}" ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ø${transaction.amount.toLocaleString()} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
                confirmBtn.textContent = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
                confirmBtn.className = 'btn btn-danger';
            }

            modal.classList.add('show');
            document.body.style.overflow = 'hidden';
        }

        // Close modal
        function closeModal() {
            modal.classList.remove('show');
            document.body.style.overflow = '';
            currentTransactionId = null;
            currentAction = null;
        }

        // Confirm action
        async function confirmAction() {
            if (!currentTransactionId || !currentAction) return;

            const transaction = allTransactions.find(t => t.id === currentTransactionId);
            if (!transaction) return;

            // Update transaction status
            transaction.status = currentAction === 'approve' ? 'approved' : 'rejected';

            // Show success toast
            showToast(
                `‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á "${transaction.memberName}" ‡πÑ‡∏î‡πâ${currentAction === 'approve' ? '‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' : '‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'}‡πÅ‡∏•‡πâ‡∏ß`,
                'success'
            );

            // Reload current page to reflect changes
            await loadTransactions(currentPage);
            closeModal();
        }

        // Show toast notification
        function showToast(message, type = 'success') {
            toast.textContent = message;
            toast.className = `toast toast-${type} show`;

            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }

        // Utility functions
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('th-TH', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
            });
        }

        function getStatusText(status) {
            const statusMap = {
                'pending': '‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                'approved': '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
                'rejected': '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß'
            };
            return statusMap[status] || status;
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function logout() {
            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                // Clear session data
                window.sessionData = null;
                showToast('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß', 'success');

                setTimeout(() => {
                    // In real app, redirect to login page
                    alert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö)');
                    window.location.href = '/admin/login';
                }, 1000);
            }
        }
    </script>
</body>

</html>